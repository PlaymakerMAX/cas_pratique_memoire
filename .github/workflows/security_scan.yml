name: Analyse de Sécurité Complète (SAST, SCA, DAST)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # Job 1 & 2: Analyses statiques (ne changent pas)
  sast-and-sca-scans:
    name: Scans SAST & SCA
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit pip-audit
      - name: Lancement du scan Bandit (SAST)
        run: bandit -r . -l low || true
      - name: Lancement du scan pip-audit (SCA)
        run: pip-audit -r requirements.txt || true

  # Job 3: Analyse approfondie avec SonarQube (ne change pas)
  sonarqube-scan:
    needs: sast-and-sca-scans
    name: Scan avec SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://2949-92-184-105-35.ngrok-free.app"

  # NOUVEAU JOB FINAL : Analyse Dynamique avec ZAP
  dast-scan:
    name: Scan DAST avec OWASP ZAP
    runs-on: ubuntu-latest
    needs: sast-and-sca-scans # Doit attendre la fin des scans statiques
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Scan DAST avec ZAP Baseline
        uses: zaproxy/action-baseline@v0.12.0
        with:
          # Dit à ZAP de scanner l'image Docker qu'il va construire à partir de notre Dockerfile
          docker_name: 'cas-pratique-image'
          # Dit à ZAP de publier les résultats sous forme d'un rapport
          artifact_name: zap_scan_report
